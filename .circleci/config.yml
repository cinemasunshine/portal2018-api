# CircleCI configuration

version: 2.1

# YAML記法を使った参照（CircleCIの設定ではない）
# https://circleci.com/docs/ja/2.0/writing-yaml/#%E3%82%A2%E3%83%B3%E3%82%AB%E3%83%BC%E3%81%A8%E3%82%A8%E3%82%A4%E3%83%AA%E3%82%A2%E3%82%B9
references:

  # https://circleci.com/docs/ja/2.0/private-images/
  # https://m-p.backlog.jp/alias/file/7162903
  docker_hub_authentication: &docker_hub_authentication
    auth:
      username: $DOCKERHUB_ID
      password: $DOCKERHUB_PASSWORD

  job_setup: &job_setup
    context: docker-hub-creds

commands:
  file_exists:
    description: "Checks whether a file exists"
    parameters:
      file:
        type: string
    steps:
      - run:
          name: Checks whether "<< parameters.file >>" exists
          command: |
            if [ -e << parameters.file >> ]; then
              echo "File exists."
              exit 0
            else
              echo "File not exists."
              exit 1
            fi

  azure_zip_deploy:
    description: "Azure ZIP Deploy"
    parameters:
      app:
        type: string
      user:
        type: string
      password:
        type: string
      zip:
        type: string
      async:
        type: enum
        enum: ["true", "false"]
        default: "false"

    steps:
      - run:
          name: Deploy to Azure
          command: |
            dir="./deploy"
            mkdir ${dir}

            deploy_result="${dir}/result.html"
            deploy_header="${dir}/header.txt"
            deploy_url="https://<< parameters.app >>.scm.azurewebsites.net/api/zipdeploy?isAsync=<< parameters.async >>"

            deploy_http_code=$(curl -s -X POST -u << parameters.user >>:<< parameters.password >> ${deploy_url} -T << parameters.zip >> -o ${deploy_result} --dump-header ${deploy_header} -w '%{http_code}')

            echo "Deploy HTTP code is ${deploy_http_code}."

            if [ ${deploy_http_code} -eq 200 ]; then
                echo "Deploy successful."
                exit 0
            elif [ ${deploy_http_code} -eq 202 ]; then
                echo "Deploy accepted."
            else
                echo "Deploy failed."
                exit 1
            fi

            pollable_url=""
            regex="^Location:\s(.+)$"

            while read line
            do
              if [[ ${line} =~ ${regex} ]]; then
                pollable_url=$(echo ${BASH_REMATCH[1]} | tr -d "\r\n" | tr -d "\n")
                break
              fi
            done < ${deploy_header}

            if [ ${pollable_url} = "" ]; then
              echo "Pollable URL not found."
              exit 1
            fi

            echo "Polling deployment status."

            polling_count=0
            polling_wait=30

            while true
            do
              polling_count=$((++polling_count))
              status_result="${dir}/status_${polling_count}.json"

              status_http_code=$(curl -sS -u << parameters.user >>:<< parameters.password >> ${pollable_url} -o ${status_result} -w '%{http_code}')

              echo "Deployment status HTTP code is ${status_http_code}."

              if [ ${status_http_code} -lt 200 -o ${status_http_code} -ge 300 ]; then
                  echo "Request status failed."
                  exit 1
              fi

              result=$(cat ${status_result})
              complete=$(echo ${result} | jq '.complete')
              status=$(echo ${result} | jq '.status')
              status_text=$(echo ${result} | jq -r '.status_text')

              if ${complete}; then
                if [ ${status} -eq 4 ]; then
                  break
                fi

                echo "Deploy failed."
                echo "${status_text}"
                exit 1
              else
                echo "${status_text}"
              fi

              sleep ${polling_wait}
            done

            echo "Deploy successful."

      - store_artifacts:
          path: ./deploy

executors:
  build:
    docker:
      - image: circleci/php:7.3
        <<: *docker_hub_authentication

  test:
    docker:
      - image: circleci/php:7.3
        <<: *docker_hub_authentication

        # 基本は.env.testingなどで設定する
        # 差分が大きくなるようなら専用の.envファイルを作成するなど
        environment:
          DB_HOST: "127.0.0.1"

      - image: circleci/mysql:5.7
        <<: *docker_hub_authentication
        environment:
          MYSQL_DATABASE: test_db
          MYSQL_ROOT_PASSWORD: qwer4321
          TZ: "Asia/Tokyo"

  deployment:
    docker:
      - image: cimg/base:stable

jobs:
  build_development:
    working_directory: ~/development
    executor: build

    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-dev-{{ checksum "composer.lock" }}
            - composer-

      - run:
          name: Composer install (with require-dev)
          command: composer install --dev -n --prefer-dist

      - save_cache:
          key: composer-dev-{{ checksum "composer.lock" }}
          paths:
            - ./vendor

      - run:
          name: Generate Doctrine Proxies
          command: php artisan doctrine:generate:proxies

      - run:
          name: Create .user.ini file
          command: cp .user.ini.development .user.ini

      - run:
          name: Create version file
          command: echo "${CIRCLE_SHA1}.${CIRCLE_BUILD_NUM}" | tee version.txt

      - run:
          name: ZIP archive
          command: >-
            zip -r app_development.zip
            app azure bootstrap config database public resources routes storage vendor artisan .user.ini README.md version.txt
            -x public/.htaccess

      - store_artifacts:
          path: ./app_development.zip

      - persist_to_workspace:
          root: .
          paths:
            - .

  build_production:
    working_directory: ~/production
    executor: build

    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-{{ checksum "composer.lock" }}
            - composer-

      - run:
          name: Composer install
          command: composer install  -n --prefer-dist --optimize-autoloader

      - save_cache:
          key: composer-{{ checksum "composer.lock" }}
          paths:
            - ./vendor

      - run:
          name: Generate Doctrine Proxies
          command: php artisan doctrine:generate:proxies

      - run:
          name: Create .user.ini file
          command: cp .user.ini.production .user.ini

      - run:
          name: Create version file
          command: echo "${CIRCLE_SHA1}.${CIRCLE_BUILD_NUM}" | tee version.txt

      - run:
          name: ZIP archive
          command: >-
            zip -r app.zip
            app azure bootstrap config database public resources routes storage vendor artisan .user.ini README.md version.txt
            -x public/.htaccess

      - store_artifacts:
          path: ./app.zip

      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    working_directory: ~/development
    executor: test

    steps:
      - run:
          name: Install PHP Extension
          command: sudo docker-php-ext-install pdo_mysql

      - attach_workspace:
          at: .

      - run:
          name: PHP Lint
          command: composer phplint

      - run:
          name: PHP CodeSniffer
          command: composer phpcs

      - run:
          name: PHPStan
          command: composer phpstan

      - run:
          name: PHPUnit
          command: composer test

  deploy_to_dev:
    working_directory: ~/development
    executor: deployment
    steps:
      - attach_workspace:
          at: .

      - file_exists:
          file: app_development.zip

      - azure_zip_deploy:
          app: ssk-portal2018-api-win-dev
          user: $DEV_AAS_USER
          password: $DEV_AAS_PASSWORD
          zip: app_development.zip
          async: "true"

  deploy_to_prod_release:
    working_directory: ~/production
    executor: deployment

    steps:
      - attach_workspace:
          at: .

      - file_exists:
          file: app.zip

      - azure_zip_deploy:
          app: ssk-portal2018-api-win-prod-release
          user: $PROD_RELEASE_AAS_USER
          password: $PROD_RELEASE_AAS_PASSWORD
          zip: app.zip
          async: "true"

workflows:
  version: 2

  deploy_development:
    jobs:
      - build_development:
          <<: *job_setup
          filters:
            branches:
              ignore: master

      - test:
          <<: *job_setup
          requires:
            - build_development

      - deploy_approval:
          type: approval
          requires:
            - test

      - deploy_to_dev:
          <<: *job_setup
          requires:
            - deploy_approval

  deploy_production:
    jobs:
      - build_development:
          <<: *job_setup
          filters:
            branches:
              only: master

      - test:
          <<: *job_setup
          requires:
            - build_development

      - build_production:
          <<: *job_setup
          requires:
            - test

      - deploy_approval:
          type: approval
          requires:
            - build_production

      - deploy_to_prod_release:
          <<: *job_setup
          requires:
            - deploy_approval
