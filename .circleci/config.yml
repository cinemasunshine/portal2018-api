# CircleCI configuration

version: 2.1

# YAML記法を使った参照（CircleCIの設定ではない）
# https://circleci.com/docs/ja/2.0/writing-yaml/#%E3%82%A2%E3%83%B3%E3%82%AB%E3%83%BC%E3%81%A8%E3%82%A8%E3%82%A4%E3%83%AA%E3%82%A2%E3%82%B9
references:

  # https://circleci.com/docs/ja/2.0/private-images/
  # https://m-p.backlog.jp/alias/file/7162903
  docker_hub_authentication: &docker_hub_authentication
    auth:
      username: $DOCKERHUB_ID
      password: $DOCKERHUB_ACCESS_TOKEN

  job_setup: &job_setup
    context: docker-hub-creds

commands:
  fix_composer_version:
    description: "Composerのバージョンを固定"
    steps:
      - run:
          name: Using Composer version 2
          command: sudo composer self-update --2

  deployment_pre_build:
    description: "デプロイ前のビルド"
    steps:
      - restore_cache:
          keys:
            - composer-{{ checksum "composer.lock" }}
            - composer-

      - fix_composer_version

      - run:
          name: Composer install
          command: composer install --no-dev -n --prefer-dist

      - save_cache:
          key: composer-{{ checksum "composer.lock" }}
          paths:
            - ./vendor

      - run:
          name: Generate Doctrine Proxies
          command: php artisan doctrine:generate:proxies

orbs:
  gcp-cli: circleci/gcp-cli@2.4.1

executors:
  build:
    docker:
      - image: cimg/php:7.4
        <<: *docker_hub_authentication

  test:
    docker:
      - image: circleci/php:7.4
        <<: *docker_hub_authentication

        # 基本は.env.testingなどで設定する
        # 差分が大きくなるようなら専用の.envファイルを作成するなど
        environment:
          DB_HOST: "127.0.0.1"

      - image: circleci/mysql:5.7
        <<: *docker_hub_authentication
        environment:
          MYSQL_DATABASE: test_db
          MYSQL_ROOT_PASSWORD: qwer4321
          TZ: "Asia/Tokyo"

jobs:
  test:
    working_directory: ~/test
    executor: test

    steps:
      - run:
          name: Install PHP Extension
          command: sudo docker-php-ext-install pdo_mysql

      - checkout

      - restore_cache:
          keys:
            - composer-dev-{{ checksum "composer.lock" }}
            - composer-

      - fix_composer_version

      - run:
          name: Composer install (with require-dev)
          command: composer install --dev -n --prefer-dist

      - save_cache:
          key: composer-dev-{{ checksum "composer.lock" }}
          paths:
            - ./vendor

      - run:
          name: Generate Doctrine Proxies
          command: php artisan doctrine:generate:proxies

      - run:
          name: PHP Lint
          command: composer phplint

      - run:
          name: PHP CodeSniffer
          command: composer phpcs

      - run:
          name: PHPStan
          command: composer phpstan

      - run:
          name: PHPUnit
          command: composer test

  deployment_pre_build_dev:
    working_directory: ~/deployment-dev
    executor: build
    steps:
      - checkout

      - deployment_pre_build

      - persist_to_workspace:
          root: .
          paths:
            - .

  deploy_to_development:
    working_directory: ~/deployment-dev
    executor: gcp-cli/default
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Create app.yaml
          command: sed s/:PROJECT_ID:/$GOOGLE_PROJECT_ID_DEVELOPMENT/ ./.gcp/app.yaml > app.yaml

      - store_artifacts:
          path: ./app.yaml

      - run:
          name: Copy php.ini
          command: cp ./.gcp/php.development.ini php.ini

      - run:
          name: Create includes env yaml
          command: echo $ENV_VARIABLES_DEVELOPMENT | base64 --decode > ./.gcp/env.yaml

      - store_artifacts:
          path: ./.gcp/env.yaml

      - gcp-cli/install

      - gcp-cli/initialize:
          gcloud-service-key: GCLOUD_SERVICE_KEY_DEVELOPMENT
          google-compute-region: GOOGLE_COMPUTE_REGION_DEVELOPMENT
          google-project-id: GOOGLE_PROJECT_ID_DEVELOPMENT

      # composerのコマンドイベントを使いたいのでキャッシュを無効にする
      - run: gcloud --quiet app deploy --no-cache

  deployment_pre_build_prod:
    working_directory: ~/deployment-prod
    executor: build
    steps:
      - checkout

      - deployment_pre_build

      - persist_to_workspace:
          root: .
          paths:
            - .

  deploy_to_production:
    working_directory: ~/deployment-prod
    executor: gcp-cli/default
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Create app.yaml
          command: sed s/:PROJECT_ID:/$GOOGLE_PROJECT_ID_PRODUCTION/ ./.gcp/app.yaml > app.yaml

      - store_artifacts:
          path: ./app.yaml

      - run:
          name: Copy php.ini
          command: cp ./.gcp/php.production.ini php.ini

      - run:
          name: Create includes env yaml
          command: echo $ENV_VARIABLES_PRODUCTION | base64 --decode > ./.gcp/env.yaml

      - store_artifacts:
          path: ./.gcp/env.yaml

      - run:
          name: Set version
          command: echo 'export VERSION="${CIRCLE_SHA1:0:8}-${CIRCLE_BUILD_NUM}"' >> "$BASH_ENV"

      - run: echo $VERSION > version.txt

      - persist_to_workspace:
          root: .
          paths:
            - version.txt

      - gcp-cli/install

      - gcp-cli/initialize:
          gcloud-service-key: GCLOUD_SERVICE_KEY_PRODUCTION
          google-compute-region: GOOGLE_COMPUTE_REGION_PRODUCTION
          google-project-id: GOOGLE_PROJECT_ID_PRODUCTION

      # composerのコマンドイベントを使いたいのでキャッシュを無効にする
      - run: gcloud --quiet app deploy --version=$VERSION --no-cache --no-promote

  publish_deployed_version_production:
    working_directory: ~/deployment-prod
    executor: gcp-cli/default
    steps:
      - gcp-cli/install

      - gcp-cli/initialize:
          gcloud-service-key: GCLOUD_SERVICE_KEY_PRODUCTION
          google-compute-region: GOOGLE_COMPUTE_REGION_PRODUCTION
          google-project-id: GOOGLE_PROJECT_ID_PRODUCTION

      - attach_workspace:
          at: .

      - run:
          name: Migrating traffic
          command: |
            version=$(cat version.txt)
            gcloud app services set-traffic default --splits=$version=1 --quiet

workflows:
  version: 2

  deploy_development:
    jobs:
      - test:
          <<: *job_setup
          filters:
            branches:
              ignore: master

      - deployment_pre_build_dev:
          <<: *job_setup
          filters:
            branches:
              ignore: master

      - deploy_to_development:
          <<: *job_setup
          requires:
            - deployment_pre_build_dev

  deploy_production:
    jobs:
      - test:
          <<: *job_setup
          filters:
            branches:
              only: master

      - deploy_approval:
          type: approval
          requires:
            - test

      - deployment_pre_build_prod:
          <<: *job_setup
          requires:
            - deploy_approval

      - deploy_to_production:
          <<: *job_setup
          requires:
            - deployment_pre_build_prod

      - publish_approval:
          type: approval
          requires:
            - deploy_to_production

      - publish_deployed_version_production:
          <<: *job_setup
          requires:
            - publish_approval
