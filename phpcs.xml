<?xml version="1.0"?>
<ruleset name="MyStandard">
    <description>A custom coding standard</description>

    <file>./app</file>
    <file>./database</file>
    <file>./tests</file>

    <arg name="report-full"/>
    <arg value="sp"/>

    <!-- Base rule -->
    <rule ref="Motionpicture">
        <exclude name="PSR12.Files.FileHeader"/>
        <!-- checked by SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing.WhitespaceAfterNullabilitySymbol -->
        <exclude name="PSR12.Functions.NullableTypeDeclaration.WhitespaceFound"/>
        <!-- checked by SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing -->
        <exclude name="PSR12.Functions.ReturnTypeDeclaration"/>
    </rule>

    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod.Found">
        <!-- `report()` and `render()` -->
        <exclude-pattern>app/Exceptions/Handler.php</exclude-pattern>

        <!-- `__construct()` -->
        <exclude-pattern>app/Http/Resources/Schedule.php</exclude-pattern>
        <exclude-pattern>app/Http/Resources/ShowingFormat.php</exclude-pattern>
        <exclude-pattern>app/Http/Resources/ShowingTheater.php</exclude-pattern>
        <exclude-pattern>app/Http/Resources/Title.php</exclude-pattern>

        <!-- `boot()` -->
        <exclude-pattern>app/Providers/EventServiceProvider.php</exclude-pattern>
    </rule>

    <rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace">
        <!-- Follow Laravel rules -->
        <exclude-pattern>database/seeds/*.php</exclude-pattern>
    </rule>

    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <!-- Add vendor annotations -->
            <property name="annotationsGroups" type="array">
                <element value="
                    @internal,
                    @deprecated,
                    @todo,
                "/>
                <element value="
                    @link,
                    @see,
                    @uses,
                "/>

                <!-- Vendor annotations -->
                <element value="@ORM\"/>

                <!-- PHPUnit annotations -->
                <element value="
                    @doesNotPerformAssertions,
                    @group,
                    @runInSeparateProcess,
                    @preserveGlobalState,
                    @test,
                "/>

                <element value="
                    @param,
                    @return,
                "/>
                <element value="@throws"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration.MissingVariable">
        <!-- Follow Laravel rules -->
        <exclude-pattern>database/factories/*.php</exclude-pattern>
    </rule>

    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <!-- Follow Laravel rules -->
        <exclude-pattern>app/Http/Kernel.php</exclude-pattern>
    </rule>

    <!-- Require presence of declare(strict_types=1) -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="2"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
            <property name="newlinesCountAfterDeclare" value="2"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes.DeclareStrictTypesMissing">
        <!-- Follow Laravel rules -->
        <exclude-pattern>app/Console/Kernel.php</exclude-pattern>
        <exclude-pattern>app/Exceptions/Handler.php</exclude-pattern>
        <exclude-pattern>app/Http/Kernel.php</exclude-pattern>
        <exclude-pattern>app/Http/Middleware/*.php</exclude-pattern>
        <exclude-pattern>app/Providers/*.php</exclude-pattern>
    </rule>
    <!-- Require use of short versions of scalar types (i.e. int instead of integer) -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <!-- Require ? when default value is null -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <!-- Require the `null` type hint to be in the last position of annotations -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>
    <!-- Require types to be written as natively if possible;
         require iterable types to specify phpDoc with their content;
         forbid useless/duplicated information in phpDoc -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="Traversable"/>
                <element value="Iterator"/>
                <element value="IteratorAggregate"/>
            </property>
        </properties>
        <!-- Follow Laravel rules -->
        <exclude-pattern>app/Console/Kernel.php</exclude-pattern>
        <exclude-pattern>app/Exceptions/Handler.php</exclude-pattern>
        <exclude-pattern>app/Http/Middleware/*.php</exclude-pattern>
    </rule>
    <!-- Require one space between typehint and variable, require no space between nullability sign and typehint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
    <!-- Require types to be written as natively if possible;
         require iterable types to specify phpDoc with their content;
         forbid useless/duplicated information in phpDoc -->
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="Traversable"/>
                <element value="Iterator"/>
                <element value="IteratorAggregate"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingTraversableTypeHintSpecification">
        <!-- Follow Laravel rules -->
        <exclude-pattern>app/Console/Kernel.php</exclude-pattern>
        <exclude-pattern>app/Exceptions/Handler.php</exclude-pattern>
        <exclude-pattern>app/Http/Kernel.php</exclude-pattern>
        <exclude-pattern>app/Http/Middleware/*.php</exclude-pattern>
        <exclude-pattern>app/Providers/*.php</exclude-pattern>
    </rule>
    <!-- Require one space between typehint and variable;
         require no space between nullability sign and typehint
         Require one space before nullability symbol or a typehint  -->
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHintSpacing"/>
    <!-- Require types to be written as natively if possible;
         require iterable types to specify phpDoc with their content;
         forbid useless/duplicated information in phpDoc -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="Traversable"/>
                <element value="Iterator"/>
                <element value="IteratorAggregate"/>
            </property>
        </properties>
        <!-- Follow Laravel rules -->
        <exclude-pattern>app/Console/Kernel.php</exclude-pattern>
        <exclude-pattern>app/Exceptions/Handler.php</exclude-pattern>
        <exclude-pattern>app/Http/Middleware/*.php</exclude-pattern>
        <exclude-pattern>app/Providers/*.php</exclude-pattern>
    </rule>
    <!-- Require space around colon in return types -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="0"/>
        </properties>
    </rule>
    <!-- Forbid useless @var for constants -->
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint.UselessVarAnnotation">
        <!-- Follow Laravel rules -->
        <exclude-pattern>app/Http/Middleware/*.php</exclude-pattern>
        <exclude-pattern>app/Providers/*.php</exclude-pattern>
    </rule>
</ruleset>
